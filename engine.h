#ifndef CHESSBOARD_H
#define CHESSBOARD_H

#include <iostream>
#include <cstdint>
#include <sstream>
#include <bitset>
#include <unordered_map>
#include <string>
#include <vector>
#include <algorithm>
#include <random>
#include <list>
#include <fstream>
#include "magic_bits.hpp"


class ChessBoard {
private:
    uint64_t pieces[12]; // 6 for white, 6 for black: pawns, knights, bishops, rooks, queens, kings
    int turn = 0; // 0 for white, 1 for black
    int castling[4] = {1, 1, 1, 1}; // 0 for no, 1 for yes
    uint64_t enPassant = 0;
    int halfMoveClock = 0;
    int fullMoveNumber = 1;
    uint64_t occupancies[2];
    uint64_t visions[2];
    uint64_t knightAttacks[64] = {132096u, 329728u, 659712u, 1319424u, 2638848u, 5277696u, 10489856u, 4202496u, 33816580u, 84410376u, 168886289u, 337772578u, 675545156u, 1351090312u, 2685403152u, 1075839008u, 8657044482u, 21609056261u, 43234889994u, 86469779988u, 172939559976u, 345879119952u, 687463207072u, 275414786112u, 2216203387392u, 5531918402816u, 11068131838464u, 22136263676928u, 44272527353856u, 88545054707712u, 175990581010432u, 70506185244672u, 567348067172352u, 1416171111120896u, 2833441750646784u, 5666883501293568u, 11333767002587136u, 22667534005174272u, 45053588738670592u, 18049583422636032u, 145241105196122112u, 362539804446949376u, 725361088165576704u, 1450722176331153408u, 2901444352662306816u, 5802888705324613632u, 11533718717099671552u, 4620693356194824192u, 288234782788157440u, 576469569871282176u, 1224997833292120064u, 2449995666584240128u, 4899991333168480256u, 9799982666336960512u, 1152939783987658752u, 2305878468463689728u, 1128098930098176u, 2257297371824128u, 4796069720358912u, 9592139440717824u, 19184278881435648u, 38368557762871296u, 4679521487814656u, 9077567998918656u};
    uint64_t diagonalMasks[64] = {9241421688590303744u, 36099303471056128u, 141012904249856u, 550848566272u, 6480472064u, 1108177604608u, 283691315142656u, 72624976668147712u, 4620710844295151618u, 9241421688590368773u, 36099303487963146u, 141017232965652u, 1659000848424u, 283693466779728u, 72624976676520096u, 145249953336262720u, 2310355422147510788u, 4620710844311799048u, 9241421692918565393u, 36100411639206946u, 424704217196612u, 72625527495610504u, 145249955479592976u, 290499906664153120u, 1155177711057110024u, 2310355426409252880u, 4620711952330133792u, 9241705379636978241u, 108724279602332802u, 145390965166737412u, 290500455356698632u, 580999811184992272u, 577588851267340304u, 1155178802063085600u, 2310639079102947392u, 4693335752243822976u, 9386671504487645697u, 326598935265674242u, 581140276476643332u, 1161999073681608712u, 288793334762704928u, 577868148797087808u, 1227793891648880768u, 2455587783297826816u, 4911175566595588352u, 9822351133174399489u, 1197958188344280066u, 2323857683139004420u, 144117404414255168u, 360293502378066048u, 720587009051099136u, 1441174018118909952u, 2882348036221108224u, 5764696068147249408u, 11529391036782871041u, 4611756524879479810u, 567382630219904u, 1416240237150208u, 2833579985862656u, 5667164249915392u, 11334324221640704u, 22667548931719168u, 45053622886727936u, 18049651735527937u};
    uint64_t orthogonalMasks[64] = {72340172838076926u, 144680345676153597u, 289360691352306939u, 578721382704613623u, 1157442765409226991u, 2314885530818453727u, 4629771061636907199u, 9259542123273814143u, 72340172838141441u, 144680345676217602u, 289360691352369924u, 578721382704674568u, 1157442765409283856u, 2314885530818502432u, 4629771061636939584u, 9259542123273813888u, 72340172854657281u, 144680345692602882u, 289360691368494084u, 578721382720276488u, 1157442765423841296u, 2314885530830970912u, 4629771061645230144u, 9259542123273748608u, 72340177082712321u, 144680349887234562u, 289360695496279044u, 578721386714368008u, 1157442769150545936u, 2314885534022901792u, 4629771063767613504u, 9259542123257036928u, 72341259464802561u, 144681423712944642u, 289361752209228804u, 578722409201797128u, 1157443723186933776u, 2314886351157207072u, 4629771607097753664u, 9259542118978846848u, 72618349279904001u, 144956323094725122u, 289632270724367364u, 578984165983651848u, 1157687956502220816u, 2315095537539358752u, 4629910699613634624u, 9259541023762186368u, 143553341945872641u, 215330564830528002u, 358885010599838724u, 645993902138460168u, 1220211685215703056u, 2368647251370188832u, 4665518383679160384u, 9259260648297103488u, 18302911464433844481u, 18231136449196065282u, 18087586418720506884u, 17800486357769390088u, 17226286235867156496u, 16077885992062689312u, 13781085504453754944u, 9187484529235886208u};
    std::vector<uint64_t> white_Visions;
    std::vector<uint64_t> black_Visions;
    magic_bits::Attacks attacks;
    ChessBoard* prevBoard;
public:
    ChessBoard();

    void printBoard();
    void loadFEN(const std::string& fen);
    std::string getFEN();
    std::string bestMove(int depth);
    void MakeMove(const std::string& move, bool ValidateMove = true);
    void undoMove();
    std::string numberToSquare(int num);
    int squareToNumber(const std::string& square);
    void getAllVision(uint64_t occu[]);
    std::vector<std::string> getValidMoves();
    bool isCheck();
    uint64_t getVision(int num);
    void printVision();
    void printOccupancy();
    std::vector<int> getSetBitIndices(uint64_t num);
    uint64_t getPawnVision(int num, int i);
    uint64_t getRookVision(int num, int i);
    uint64_t getBishopVision(int num, int i);
    int evaluateBoard();
    uint64_t getKnightVision(int num, int i);
    uint64_t getQueenVision(int num, int i);
    int minimax(int depth, int alpha, int beta, bool maximizingPlayer);
    uint64_t getKingVision(int num, int i);
    std::string getGameState();
};

#endif // CHESSBOARD_H
